(define identity (lambda (x) x))
(define positive? (lambda (x) (> x 0)))
(define negative? (lambda (x) (< x 0)))
(define even? (lambda (x) (= 0 (% x 2))))
(define odd? (lambda (x) (! (even? x))))
(define xor (lambda (x y) (and (or x y) (not (and x y)))))
(define nor (lambda (x y) (not (or x y))))
(define nand (lambda (x y) (not (and x y))))
(define >= (lambda (x y) (or (> x y) (= x y))))
(define <= (lambda (x y) (or (< x y) (= x y))))
(define repeat (lambda (token number) (if (= number 0) (list) (+ (list token) (repeat token (- number 1))))))
(define pow (lambda (b e) (reduce (lambda (a b) (* a b)) (repeat b e))))
(define list (lambda () ...))
(define range (lambda (a b) (if (>= a b) (list) (+ (list a) (range (+ a 1) b)))))
(define do (lambda () (last ...)))
